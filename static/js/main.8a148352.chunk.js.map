{"version":3,"sources":["projects/Projects.tsx","panel/Panel.tsx","button/Button.tsx","profile/Profile.tsx","projects/components/utils/degreesToRadians.ts","projects/components/matterport-logo/MatterportLogo.ts","projects/components/boundaries/Boundaries.ts","projects/components/desk/Desk.ts","projects/components/bedroom/Bedroom.ts","projects/components/moist/Moist.ts","projects/components/scene/SceneCore.ts","projects/components/scene/SceneComponent.tsx","projects/pie/pieData.ts","projects/pie/Pie.tsx","projects/pie/calculatePercentage.ts","work-exp/exp-bar/ExpBar.tsx","work-exp/badges/Badges.tsx","work-exp/WorkExp.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ProjectTypes","Panel","props","state","title","this","className","children","React","Component","Button","onBtnClick","onClick","text","Profile","useState","profileAlt","profileSrc","name","description","location","contactInfo","profile","id","alt","src","process","href","target","rel","window","open","err","console","error","degreesToRadians","degree","Math","PI","MatterportLogo","logo","tempGeometry","material","MeshPhongMaterial","color","transparent","side","DoubleSide","reflectivity","opacity","specular","geometries","materials","rotations","x","y","z","positions","LShapeGeometry","createMeshLogo","root","Object3D","i","geometry","BoxGeometry","push","j","length","geometry2","Mesh","position","updateMatrix","merge","matrix","mesh","rotateX","rotateY","rotateZ","add","scale","copy","Vector3","rotation","forEach","dispose","Boundaries","boundaries","wallMaterial","materialTransparent","floorMaterial","floor","addToFloor","obj","Array","isArray","loader","TextureLoader","floorTexture","load","wrapS","wrapT","RepeatWrapping","repeat","set","anisotropy","encoding","sRGBEncoding","MeshLambertMaterial","map","wallTexture","MeshBasicMaterial","createWalls","walls","createWallMeshes","positionWalls","createFloor","positionFloor","PlaneBufferGeometry","receiveShadow","BoxBufferGeometry","Desk","addSceneNode","GLTFLoader","onLoad","scene","Bedroom","Moist","moist","waterGeometry","material2","tempVect","SphereGeometry","createMoistComponent","addLight","spheres","calcPosition","hydro","agua1","agua2","random","light","PointLight","light_two","lightAmbient","AmbientLight","timer","Date","now","il","sphere","updateMatrixWorld","cos","sin","SceneCore","canvas","camera","renderer","components","controls","canvasWidth","innerWidth","canvasHeight","currentScene","sceneProjects","sceneObjMap","init","project","background","Color","setSize","appendChild","domElement","activate","handleResize","aspect","updateProjectionMatrix","node","componentName","visible","animate","requestAnimationFrame","renderScene","update","c","Object","entries","key","value","Scene","PerspectiveCamera","WebGLRenderer","antialias","alpha","projectName","includes","addSceneObjects","createControls","matterportLogo","matterportLogoLight","DirectionalLight","castShadow","container","animalCrossLight","SpotLight","loadThirdPartyObjects","OrbitControls","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","createDesk","createBedroom","render","SceneComponent","sceneCore","document","getElementById","currentProject","addEventListener","removeEventListener","nextProps","updateProject","pieData","completion","Pie","totalCircumference","clickTimeout","updatePercentage","completed","setInterval","updatePercentageNumber","percentage","setState","clearInterval","prevState","pieClicked","clearTimeout","setTimeout","onMouseOver","e","classList","contains","pieHover","onMouseOut","_","circleElements","index","createProgressCircle","strokeColor","amt","totalAmt","calculateDPath","radius","diameter","completedAmount","total","offsetCompletion","circumference","d","stroke","strokeDasharray","strokeDashoffset","viewSize","bgSize","clickShadowSize","clickedSize","bgClicked","viewBox","renderCircleElements","Projects","projects","type","ThreeD","TwoD","projectsMap","0","1","2","3","onNext","currentProjectCount","onPrev","getUIProject","uiProject","ExpBar","style","width","backgroundColor","Badges","badges","badge","idx","renderBadges","WorkExp","onOpenModal","openModal","onCloseModal","months","matterportExp","calculatePercentage","ellieMaeDevExp","ellieMaeDevInternExp","ellieMaeQAExp","allow","height","scrolling","App","Boolean","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"qWAIYA,E,2FCmBGC,G,wDAnBb,WAAYC,GAAoB,IAAD,8BAC7B,cAAMA,IACDC,MAAQ,GAFgB,E,qDAKrB,IACAC,EAAUC,KAAKH,MAAfE,MACR,OACA,yBAAKE,UAAU,SACXD,KAAKH,MAAME,OAAS,4BAAKA,GAC1BC,KAAKH,MAAMK,c,GAXEC,IAAMC,YCuBXC,G,wDAtBb,WAAYR,GAAqB,IAAD,8BAC9B,cAAMA,IAIAS,WAAa,WACnB,EAAKT,MAAMU,WAJX,EAAKT,MAAQ,GAFiB,E,qDAU9B,OACA,yBAAKG,UAAU,cACb,4BAAQA,UAAU,kBAAkBM,QAASP,KAAKM,YAAaN,KAAKH,MAAMW,W,GAb3DL,IAAMC,YCEdK,EAAU,WAAO,IAAD,EACTC,oBAAS,iBAAO,CAChCC,WAAY,uBACZC,WAAY,kBACZC,KAAM,eACNC,YAAa,oBACbC,SAAU,eACVC,YAAa,2BANRC,EADoB,oBAkB3B,OACE,yBAAKC,GAAG,WACN,kBAAC,EAAD,KACE,yBAAKjB,UAAU,qBACb,yBAAKiB,GAAG,eACN,yBAAKC,IAAKF,EAAQN,WAAYS,IAAG,UAAKC,WAAL,mBAAsCJ,EAAQL,eAEjF,yBAAKM,GAAG,QACN,8BAAOD,EAAQJ,OAEjB,yBAAKK,GAAG,eACN,2BAAID,EAAQH,cAEd,yBAAKI,GAAG,YACN,0BAAMjB,UAAU,wBAChB,0BAAMA,UAAU,YAAYgB,EAAQF,WAEtC,yBAAKG,GAAG,gBACN,6BACE,uBAAGjB,UAAU,WAAWqB,KAAK,4CAA4CC,OAAO,SAASC,IAAI,uBAA7F,aAEF,6BACE,uBAAGvB,UAAU,SAASqB,KAAK,kCAAkCC,OAAO,SAASC,IAAI,uBAAjF,WAEF,6BACE,uBAAGvB,UAAU,QAAQqB,KAAK,+BAA+BL,EAAQD,eAGrE,yBAAKE,GAAG,UACN,kBAAC,EAAD,CAAQV,KAAM,SAAUD,QArClC,WACE,IACEkB,OAAOC,KAAK,qFAAsF,UAClG,MAAOC,GACPC,QAAQC,MAAM,oCAoCZ,yBAAK5B,UAAU,qBACb,yBAAKiB,GAAG,SACN,2CACA,iQAIA,yQAKA,kN,eCnECY,EAAmB,SAACC,GAC/B,OAAOA,GAAUC,KAAKC,GAAK,MC8GdC,EA3Gf,WA6CE,aAAe,IAAD,gCA5CErB,KAAO,kBA4CT,KA3CNsB,UA2CM,OA1CNC,kBA0CM,OAzCNC,SAAW,IAAIC,IAAkB,CACvCC,MAAO,SACPC,aAAa,EACbC,KAAMC,IACNC,aAAc,EACdC,QAAS,GACTC,SAAU,WAmCE,KAhCNC,WAAyB,GAgCnB,KA/BNC,UAAwB,GA+BlB,KA7BNC,UAAY,CAClB,CAAEC,EAAG,GAAIC,GAAI,MAAOC,EAAG,IA4BX,KA1BNC,UAAY,CAClB,CAAEH,EAAG,EAAGC,EAAG,EAAGC,EAAG,IAyBL,KAvBNE,eAAiB,CACvB,CAAEJ,EAAG,EAAGC,EAAG,EAAGC,EAAG,GACjB,CAAEF,EAAG,EAAGC,EAAG,EAAGC,EAAG,GACjB,CAAEF,EAAG,EAAGC,EAAG,EAAGC,EAAG,GACjB,CAAEF,GAAI,EAAGC,EAAG,EAAGC,EAAG,GAClB,CAAEF,EAAG,EAAGC,EAAG,EAAGC,EAAG,GACjB,CAAEF,EAAG,EAAGC,EAAG,EAAGC,GAAI,GAClB,CAAEF,EAAG,EAAGC,EAAG,EAAGC,GAAI,GAClB,CAAEF,EAAG,EAAGC,EAAG,EAAGC,GAAI,GAClB,CAAEF,EAAG,EAAGC,EAAG,EAAGC,GAAI,GAElB,CAAEF,EAAG,EAAGC,EAAG,EAAGC,GAAI,GAClB,CAAEF,GAAI,EAAGC,EAAG,EAAGC,GAAI,GACnB,CAAEF,GAAI,EAAGC,EAAG,EAAGC,GAAI,GACnB,CAAEF,GAAI,EAAGC,EAAG,EAAGC,GAAI,GACnB,CAAEF,GAAI,EAAGC,EAAG,EAAGC,GAAI,GACnB,CAAEF,GAAI,EAAGC,EAAG,EAAGC,GAAI,GACnB,CAAEF,GAAI,EAAGC,EAAG,EAAGC,GAAI,GACnB,CAAEF,GAAI,EAAGC,EAAG,EAAGC,GAAI,GACnB,CAAEF,GAAI,EAAGC,EAAG,EAAGC,GAAI,GACnB,CAAEF,GAAI,EAAGC,EAAG,EAAGC,EAAG,IAGN,KAcNG,eAAiB,WAEvB,IADA,IAAMC,EAAO,IAAIC,IACRC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMC,EAAW,IAAIC,IAAY,EAAG,EAAG,GACvC,EAAKb,WAAWc,KAAKF,GACrB,IAAK,IAAIG,EAAI,EAAGA,EAAI,EAAKR,eAAeS,OAAQD,IAAK,CACnD,IAAME,EAAY,IAAIJ,IAAY,EAAG,EAAG,GACxC,EAAKvB,aAAe,IAAI4B,IAAKD,GAE7B,EAAKjB,WAAWc,KAAKG,GAErB,EAAK3B,aAAa6B,SAAShB,EAAI,EAAI,EAAKI,eAAeQ,GAAGZ,EAC1D,EAAKb,aAAa6B,SAASf,EAAI,EAAI,EAAKG,eAAeQ,GAAGX,EAC1D,EAAKd,aAAa6B,SAASd,EAAU,IAANM,EAAU,EAAI,EAAKJ,eAAeQ,GAAGV,EAAU,EAAI,EAAKE,eAAeQ,GAAGV,GAAhC,EACzE,EAAKf,aAAa8B,eAClBR,EAASS,MAAM,EAAK/B,aAAasB,SAAsB,EAAKtB,aAAagC,QAI3E,IAAMC,EAAO,IAAIL,IAAKN,EAAU,EAAKrB,UAErCgC,EAAKC,QAAQxC,EAAiB,EAAKkB,UAAUS,GAAGR,IAChDoB,EAAKE,QAAQzC,EAAiB,EAAKkB,UAAUS,GAAGP,IAChDmB,EAAKG,QAAQ1C,EAAiB,EAAKkB,UAAUS,GAAGN,IAChDkB,EAAKJ,SAAShB,GAAK,EAAKG,UAAUK,GAAGR,EACrCoB,EAAKJ,SAASf,GAAK,EAAKE,UAAUK,GAAGP,EACrCmB,EAAKJ,SAASd,GAAK,EAAKC,UAAUK,GAAGN,EAGrCI,EAAKkB,IAAIJ,GAEX,OAAOd,GA5CPvD,KAAK+C,UAAUa,KAAK5D,KAAKqC,UACzBrC,KAAKmC,KAAOnC,KAAKsD,iBACjBtD,KAAKoC,aAAe,KACpBpC,KAAKmC,KAAKuC,MAAMC,KAAK,IAAIC,KAAQ,GAAI,GAAI,KAjD7C,qDA8FI5E,KAAKmC,KAAK0C,SAAS3B,GAAK,MA9F5B,gCAkGIlD,KAAK8C,WAAWgC,SAAQ,SAACpB,GACvBA,EAASqB,aAEX/E,KAAK+C,UAAU+B,SAAQ,SAACzC,GACtBA,EAAS0C,eAtGf,gCAqDI,OAAO/E,KAAKmC,SArDhB,K,QCoGe6C,EApGf,WAUE,aAAe,IAAD,gCATEnE,KAAO,kBAST,KARNoE,gBAQM,OAPNC,kBAOM,OANNC,yBAMM,OALNC,mBAKM,OAJNC,MAAyB,KAInB,KAHNvC,WAA+B,GAGzB,KAFNC,UAAwB,GAElB,KAuDPuC,WAAa,SAACC,GAEQ,IAAD,EADtB,EAAKF,QACHG,MAAMC,QAAQF,IAChB,IAAKF,OAAMZ,IAAX,oBAAkBc,IAElB,EAAKF,MAAMZ,IAAIc,KA3DnB,IAAMG,EAAS,IAAIC,KACbC,EAAeF,EAAOG,KAAP,UAAexE,WAAf,qCACrBuE,EAAaE,MAAQF,EAAaG,MAAQC,KAC1CJ,EAAaK,OAAOC,IAAK,EAAG,GAC5BN,EAAaO,WAAa,GAC1BP,EAAaQ,SAAWC,KACxBrG,KAAKoF,cAAgB,IAAIkB,IAAoB,CAC3CC,IAAKX,IAEP,IAAMY,EAAcd,EAAOG,KAAP,UAAexE,WAAf,+BACpBmF,EAAYV,MAAQU,EAAYT,MAAQC,KACxCQ,EAAYP,OAAOC,IAAK,EAAG,GAC3BM,EAAYL,WAAa,GACzBK,EAAYJ,SAAWC,KACvBrG,KAAKkF,aAAe,IAAIoB,IAAoB,CAC1C7D,KAAMC,IACN6D,IAAKC,IAEPxG,KAAKmF,oBAAuB,IAAIsB,IAAmB,CAAEjE,aAAa,EAAMI,QAAS,EAAGH,KAAMC,MAE1F1C,KAAK+C,UAAUa,KAAK5D,KAAKoF,cAAepF,KAAKkF,aAAclF,KAAKmF,qBAEhEnF,KAAKiF,WAAajF,KAAK0G,cAjC3B,0DAqCI,IAAMnD,EAAO,IAAIC,IACXmD,EAAQ3G,KAAK4G,mBAOnB,OANA5G,KAAK6G,cAAcF,GACnB3G,KAAKqF,MAAQrF,KAAK8G,cAClB9G,KAAK+G,cAAc/G,KAAKqF,OACxBsB,EAAMlC,IAAIzE,KAAKqF,OACf9B,EAAKkB,IAAIkC,GACTpD,EAAKmB,MAAMC,KAAK,IAAIC,KAAQ,EAAG,EAAG,IAC3BrB,IA7CX,oCAiDI,IAAMG,EAAW,IAAIsD,IAAoB,KAAM,KAC/ChH,KAAK8C,WAAWc,KAAKF,GACrB,IAAMW,EAAO,IAAIL,IAAKN,EAAU1D,KAAKoF,eAErC,OADAf,EAAK4C,eAAgB,EACd5C,IArDX,yCAyDI,IAAMX,EAAW,IAAIwD,IAAkB,KAAM,IAAM,MACnDlH,KAAK8C,WAAWc,KAAKF,GACrB,IAAMW,EAAO,IAAIL,IAAKN,EAAU,CAAC1D,KAAKkF,aAAclF,KAAKkF,aACvDlF,KAAKkF,aAAclF,KAAKmF,oBAAqBnF,KAAKmF,oBAAqBnF,KAAKmF,sBAE9E,OADAd,EAAK4C,eAAgB,EACd5C,IA9DX,oCA2EwBA,GACpBA,EAAKJ,SAASf,GAAM,IACpBmB,EAAKQ,SAAS5B,GAAMjB,KAAKC,GAAK,IA7ElC,oCAgFwBoC,GACpBA,EAAKJ,SAASd,GAAM,MAjFxB,kEA2FInD,KAAK8C,WAAWgC,SAAQ,SAACpB,GACvBA,EAASqB,aAEX/E,KAAK+C,UAAU+B,SAAQ,SAACzC,GACtBA,EAAS0C,eA/Ff,gCAqFI,OAAO/E,KAAKiF,eArFhB,K,OCkBekC,EAnBf,WACE,WAAoBC,GAAwC,yBAAxCA,eADtB,yDAGuB,IAAD,QACH,IAAIC,KACZxB,KAAP,UAAexE,WAAf,4BAAgE,SAACkE,GAAD,OAAe,EAAK+B,OAAO/B,QAL/F,6BAQiBA,GACbA,EAAIgC,MAAMtD,SAAShB,EAAI,IACvBsC,EAAIgC,MAAMtD,SAASf,EAAI,IACvBqC,EAAIgC,MAAM1C,SAAS5B,GAAMjB,KAAKC,GAAK,EACnCsD,EAAIgC,MAAM1C,SAAS1B,GAAMnB,KAAKC,GAC9BsD,EAAIgC,MAAM1C,SAAS3B,GAAMlB,KAAKC,GAAK,EACnCsD,EAAIgC,MAAM7C,MAAMwB,IAAI,IAAK,IAAK,KAC9BlG,KAAKoH,aAAa7B,EAAIgC,WAf1B,KCmBeC,EAnBf,WACE,WAAoBJ,GAAwC,yBAAxCA,eADtB,4DAG0B,IAAD,QACN,IAAIC,KACZxB,KAAP,UAAexE,WAAf,+BAAmE,SAACkE,GAAD,OAAe,EAAK+B,OAAO/B,QALlG,6BAQiBA,GACbA,EAAIgC,MAAMtD,SAAShB,GAAK,IACxBsC,EAAIgC,MAAMtD,SAASd,EAAI,IACvBoC,EAAIgC,MAAMtD,SAASf,EAAI,IACvBqC,EAAIgC,MAAM1C,SAAS5B,GAAMjB,KAAKC,GAAK,EACnCsD,EAAIgC,MAAM1C,SAAS1B,GAAMnB,KAAKC,GAC9BsD,EAAIgC,MAAM7C,MAAMwB,IAAI,GAAI,GAAI,IAC5BlG,KAAKoH,aAAa7B,EAAIgC,WAf1B,K,QCAqBE,E,WAWnB,aAAe,IAAD,2BAVE5G,KAAO,QAUT,KATN6G,MAAkB,IAAIlE,IAShB,KARNE,cAQM,OAPNiE,mBAOM,OANNtF,cAMM,OALNuF,eAKM,OAJN9E,WAAyB,GAInB,KAHNC,UAAwB,GAGlB,KAFN8E,SAAW,IAAIjD,KAGrB5E,KAAK0D,SAAW,IAAIoE,KAAe,GAAI,GAAI,IAC3C9H,KAAK2H,cAAgB,IAAIG,KAAe,GAAI,GAAI,IAEhD9H,KAAKqC,SAAW,IAAIC,IAAkB,CACpCC,MAAO,YAETvC,KAAK4H,UAAY,IAAItF,IAAkB,CACrCC,MAAO,YAGTvC,KAAK8C,WAAWc,KAAK5D,KAAK0D,UAC1B1D,KAAK+C,UAAUa,KAAK5D,KAAKqC,SAAUrC,KAAK4H,YAExC,EAAA5H,KAAK0H,OAAMjD,IAAX,oBAAkBzE,KAAK+H,yBACvB/H,KAAKgI,W,mEAUL,IAFA,IAAMC,EAAsB,GAEnBxE,EAAI,EAAGA,EAAI,IAAMA,IAAK,CAC7B,IAAMF,EAAO,IAAIC,IACjBD,EAAKU,SAASU,KAAK3E,KAAKkI,gBAExB,IAAMC,EAAQ,IAAInE,IAAKhE,KAAK0D,SAAU1D,KAAKqC,UACrC+F,EAAQ,IAAIpE,IAAKhE,KAAK2H,cAAe3H,KAAK4H,WAC1CS,EAAQ,IAAIrE,IAAKhE,KAAK2H,cAAe3H,KAAK4H,WAEhDQ,EAAMnE,SAASiC,IAAI,IAAK,GAAI,GAC5BmC,EAAMpE,SAASiC,KAAK,IAAK,GAAI,GAG7B3C,EAAKsB,SAAS5B,EAAqB,IAAhBjB,KAAKsG,SAAkBtG,KAAKC,GAAK,IACpDsB,EAAKsB,SAAS3B,EAAqB,IAAhBlB,KAAKsG,SAAkBtG,KAAKC,GAAK,IACpDsB,EAAKsB,SAAS1B,EAAqB,IAAhBnB,KAAKsG,SAAkBtG,KAAKC,GAAK,IACpDsB,EAAKkB,IAAI0D,EAAOC,EAAOC,GAEvBJ,EAAQrE,KAAKL,GAEf,OAAO0E,I,iCAIP,IAAMM,EAAQ,IAAIC,IAAW,SAAU,EAAG,KAC1CD,EAAMtE,SAASiC,IAAI,IAAM,IAAM,KAC/B,IAAMuC,EAAY,IAAID,IAAW,SAAU,EAAG,KAC9CC,EAAUxE,SAASiC,KAAK,IAAM,IAAM,KACpC,IAAMwC,EAAe,IAAIC,IAAa,SAEtC3I,KAAK0H,MAAMjD,IAAI8D,EAAOE,EAAWC,K,qCASjC,OALA1I,KAAK6H,SAAS3B,IACY,KAAvBlE,KAAKsG,SAAW,IACO,KAAvBtG,KAAKsG,SAAW,IACO,KAAvBtG,KAAKsG,SAAW,KAEZtI,KAAK6H,W,gCAIZ7H,KAAK8C,WAAWgC,SAAQ,SAACpB,GACvBA,EAASqB,aAEX/E,KAAK+C,UAAU+B,SAAQ,SAACzC,GACtBA,EAAS0C,e,+BAMX,IADA,IAAM6D,EAAQ,KAASC,KAAKC,MAClBrF,EAAI,EAAGsF,EAAK/I,KAAK0H,MAAMxH,SAAS4D,OAAQL,EAAIsF,EAAItF,IAAO,CAEjE,IAAMuF,EAAShJ,KAAK0H,MAAMxH,SAAUuD,GACpCuF,EAAOC,oBAEPD,EAAO/E,SAAShB,EAAI,IAAOjB,KAAKkH,IAAKN,EAAQnF,GAC7CuF,EAAO/E,SAASf,EAAI,IAAOlB,KAAKmH,IAAKP,EAAY,IAAJnF,GAC7CuF,EAAOnE,SAAS5B,GAAqB,IAAhBjB,KAAKsG,SAC1BU,EAAOnE,SAAS3B,GAAqB,IAAhBlB,KAAKsG,Y,gCAlE1B,OAAOtI,KAAK0H,U,KC2JD0B,E,WAtKb,WAAoBC,GAAsB,IAAD,gCAArBA,SAAqB,KAXjCC,YAWiC,OAVjC/B,WAUiC,OATjCgC,cASiC,OARjCC,WAA8B,GAQG,KAPjCC,SAAiC,KAOA,KANjCC,YAAsBjI,OAAOkI,WAMI,KALjCC,aAAuB,IAKU,KAJjCC,aAAuB,GAIU,KAHjCC,cAA0B,GAGO,KAFjCC,YAA8C,GAEb,KAOlCC,KAAO,SAACC,GACb,EAAKX,OAAOrF,SAASiC,IAAK,EAAG,EAAG,MAChC,EAAKqB,MAAM9C,IAAI,EAAK6E,QAEpB,EAAK/B,MAAM2C,WAAa,IAAIC,IAAM,SAClC,EAAKZ,SAASa,QAAQ,EAAKV,YAAa,EAAKE,cAEzC,EAAKP,QACP,EAAKA,OAAOgB,YAAY,EAAKd,SAASe,YAExC,EAAKC,SAASN,IAjByB,KAuBlCO,aAAe,WACpB,EAAKlB,OAAOmB,OAAShJ,OAAOkI,WAAa,EAAKC,aAC9C,EAAKN,OAAOoB,yBACZ,EAAKnB,SAASa,QAAQ3I,OAAOkI,WAAY,EAAKC,eA1BP,KA8GlCxC,aAAe,SAACuD,EAAgBC,GAErCD,EAAKE,SAAU,EACf,EAAKtD,MAAM9C,IAAIkG,GACf,EAAKZ,YAAYa,GAAiBD,GAlHK,KAsIlCG,QAAU,WACfC,sBAAsB,EAAKD,SAE3B,EAAKE,cAED,EAAKvB,UACP,EAAKA,SAASwB,SAIhB,EAAKzB,WAAW1E,SAAQ,SAACoG,GACvBA,EAAED,YAIJ,cAAyBE,OAAOC,QAAQ,EAAKrB,aAA7C,eAA2D,CAAC,IAAD,sBAAjDsB,EAAiD,KAA5CC,EAA4C,KACrDD,IAAQ,EAAKxB,aACfyB,EAAMT,SAAU,EAEhBS,EAAMT,SAAU,IAzJmB,KA+JlC9F,QAAU,WACf,EAAKyE,WAAW1E,SAAQ,SAACoG,GACvBA,EAAEnG,cA/JJ/E,KAAKuH,MAAQ,IAAIgE,KACjBvL,KAAKsJ,OAAS,IAAIkC,IAAmB,GAAIxL,KAAK0J,YAAc1J,KAAK4J,aAAc,EAAG,KAClF5J,KAAKuJ,SAAW,IAAIkC,KAAc,CAAEC,WAAW,EAAMC,OAAO,I,0DAyBzCC,GACd5L,KAAK8J,cAAc+B,SAASD,IAI/B5L,KAAKuH,MAAMsD,SAAU,EAErB7K,KAAK6J,aAAe+B,GAJpB5L,KAAKuH,MAAMsD,SAAU,I,+BAQRZ,GACfjK,KAAK8L,gBAAgB7B,GAGrBjK,KAAK+L,eAAe/L,KAAKsJ,OAAQtJ,KAAKuJ,Y,sCAGhBU,GAEtB,IAAMhF,EAAa,IAAID,EACjBgH,EAAiB,IAAI9J,EACrBwF,EAAQ,IAAID,EAEZwE,EAAsB,IAAIC,IAAiB,SAAU,KAC3DD,EAAoBhI,SAASU,KAAK3E,KAAKsJ,OAAOrF,UAC9CgI,EAAoBE,YAAa,EACjCH,EAAeI,UAAU3H,IAAIwH,GAE7B,IAAMI,EAAmB,IAAIC,KAAU,SAAU,KACjDD,EAAiBpI,SAASU,KAAK3E,KAAKsJ,OAAOrF,UAC3CoI,EAAiBF,YAAa,EAC9BlH,EAAWmH,UAAU3H,IAAI4H,GAGzBrM,KAAK8J,cAAclG,KAAK8D,EAAM7G,KAAMmL,EAAenL,KAAMoE,EAAWpE,MAEpEb,KAAKoH,aAAaM,EAAM0E,UAAW1E,EAAM7G,MACzCb,KAAKoH,aAAa4E,EAAeI,UAAWJ,EAAenL,MAC3Db,KAAKoH,aAAanC,EAAWmH,UAAWnH,EAAWpE,MAGnDb,KAAK6J,aAAgBI,GAAUvC,EAAM7G,KAErCb,KAAKuM,sBAAsBtH,GAG3BjF,KAAKwJ,WAAa,CAAC9B,EAAOsE,EAAgB/G,K,qCAQrBqE,EAAgBC,GACrCvJ,KAAKyJ,SAAW,IAAI+C,IAAelD,EAAQC,EAASe,YACpDtK,KAAKyJ,SAASgD,eAAgB,EAC9BzM,KAAKyJ,SAASiD,cAAgB,IAC9B1M,KAAKyJ,SAASkD,oBAAqB,EACnC3M,KAAKyJ,SAASmD,YAAc,IAC5B5M,KAAKyJ,SAASoD,YAAc,IAC5B7M,KAAKyJ,SAASqD,cAAgB9K,KAAKC,GAAK,I,4CAOZgD,GACf,IAAIkC,EAAKlC,EAAWK,YAC5ByH,aAEW,IAAIvF,EAAQvC,EAAWK,YAC/B0H,kB,kCAkBR,OAAOhN,KAAKsJ,S,oCAOZtJ,KAAKuJ,SAAS0D,OAAOjN,KAAKuH,MAAOvH,KAAKsJ,Y,KCrG3B4D,G,wDA3Cb,WAAYrN,GAA6B,IAAD,8BACtC,cAAMA,IAHAsN,UAA8B,KAIpC,EAAKrN,MAAQ,GAFyB,E,gEAMtC,IAAMuJ,EAAS+D,SAASC,eAAe,UACvCrN,KAAKmN,UAAY,IAAI/D,EAAUC,GAC/BrJ,KAAKmN,UAAUnD,KAAKhK,KAAKH,MAAMyN,gBAC/BtN,KAAKmN,UAAUrC,UACX9K,KAAKmN,WAEP1L,OAAO8L,iBAAiB,SAAUvN,KAAKmN,UAAU3C,cAAc,K,6CAK7DxK,KAAKmN,YACP1L,OAAO+L,oBAAoB,SAAUxN,KAAKmN,UAAU3C,cAAc,GAClExK,KAAKmN,UAAUpI,a,+BAKjB,OAAQ,yBAAK7D,GAAG,a,yCAGQuM,GACpBA,EAAUH,iBAAmBtN,KAAKH,MAAMyN,gBAC1CtN,KAAK0N,cAAc1N,KAAKH,MAAMyN,kB,oCAIZrD,GACfjK,KAAKmN,WACVnN,KAAKmN,UAAUO,cAAczD,O,GAtCJ9J,IAAMC,YCHtBuN,G,MAAmB,CAAC,CAC/B1N,UAAW,SACX2N,WAAY,GACZrL,MAAO,WACN,CACDtC,UAAW,SACX2N,WAAY,GACZrL,MAAO,WACN,CACDtC,UAAW,SACX2N,WAAY,GACZrL,MAAO,WAET,CACEtC,UAAW,SACX2N,WAAY,GACZrL,MAAO,aCqKMsL,E,kDAxKb,WAAYhO,GAAkB,IAAD,8BAC3B,cAAMA,IALAiO,mBAAqB,EAIA,EAHrBC,aAAuB,EAGF,EAFrBnF,MAAgB,EAEK,EAyBrBoF,iBAAmB,WACH,EAAKlO,MAAnBmO,YAEN,EAAKrF,MAAQnH,OAAOyM,YAAY,EAAKC,uBAAwB,MA5BpC,EAmCrBA,uBAAyB,WACD,MAA1B,EAAKrO,MAAMsO,YAAuB,EAAKtO,MAAMmO,WAG/C,EAAKI,SAAS,CAACJ,WAAW,IAC1BxM,OAAO6M,cAAc,EAAK1F,QAH1B,EAAKyF,UAAS,SAACE,GAAD,MAAgB,CAACH,WAAYG,EAAUH,WAAa,OArCzC,EA+CrB7N,QAAU,WAChB,EAAK8N,SAAS,CAACG,YAAY,IAC3B/M,OAAOgN,aAAa,EAAKV,cACzB,EAAKA,aAAetM,OAAOiN,YAAW,WACpC,EAAKL,SAAS,CAACG,YAAY,MAC1B,KACC,EAAK3O,MAAMU,SAAS,EAAKV,MAAMU,WArDR,EAgHrBoO,YAAc,SAACC,GACrB,IAAMrN,EAASqN,EAAErN,OACZA,IACDA,EAAOsN,UAAUC,SAAS,cAAgBvN,EAAOsN,UAAUC,SAAS,eAAiBvN,EAAOsN,UAAUC,SAAS,uBACjH,EAAKT,SAAS,CAACU,UAAU,KApHA,EA2HrBC,WAAa,SAACC,GACpB,EAAKZ,SAAS,CAACU,UAAU,KA1HzB,EAAKjP,MAAQ,CACXoP,eAAgB,GAChBH,UAAU,EACVP,YAAY,EACZP,WAAW,EACXG,WAAY,GAPa,E,gEAa3BpO,KAAKgO,qB,6CAKLvM,OAAO6M,cAActO,KAAK4I,OAC1BnH,OAAOgN,aAAazO,KAAK+N,gB,6CAwCK,IAAD,OAI7B,OAHA/N,KAAK8N,mBAAqB,EACVH,EAEDpH,KAAI,SAAC2E,EAAGiE,GACrB,OAAO,EAAKC,qBAAqBD,EAAOjE,EAAE0C,WAAY1C,EAAE3I,Y,2CAU/B4M,EAAevB,EAAoByB,GAAsB,ICvFpDC,EAAaC,EDuFsC,EAChDvP,KAAKwP,iBAAhCvM,EAD2E,EAC3EA,EAAGC,EADwE,EACxEA,EAAGuM,EADqE,EACrEA,OAAQC,EAD6D,EAC7DA,SAChBC,GCzF0BL,EDyFY1B,ECzFC2B,EDyFWvP,KAAKH,MAAM+P,MCxFjDN,EAAMC,EAAY,KDyF9BM,EAAmB7P,KAAK8N,mBAAqB,GAAK9N,KAAK8N,mBAAqB9N,KAAK8N,mBAEvF,OADA9N,KAAK8N,oBAAsB9N,KAAKH,MAAMiQ,eAAiBH,EAAkBA,EAAkB,EAEzF,0BACEtE,IAAG,iBAAY8D,GACflP,UAAW,SACX8P,EAAC,WAAM9M,EAAN,YAAWC,EAAX,cAAkBuM,EAAlB,YAA4BA,EAA5B,oBAA8CC,EAA9C,cAA4DD,EAA5D,YAAsEA,EAAtE,qBAAyFC,GAC1FM,OAAQX,EACRY,gBAAe,UAAKN,EAAL,SACfO,iBAAkBL,M,qCASD3E,GAAa,IAAD,EACGlL,KAAKH,MAAjCiQ,EADyB,EACzBA,cAAeK,EADU,EACVA,SACjBV,GAAUvE,GAAQ4E,IAAkB,EAAI9N,KAAKC,IAC7CyN,EAAoB,EAATD,EAGjB,MAAO,CACLA,SACAC,WACAzM,EALQkN,EAAW,EAMnBjN,GALUiN,EAAWT,GAAY,K,+BA4BnC,IAAMU,EAASpQ,KAAKwP,iBACda,EAAkBrQ,KAAKH,MAAMyQ,YAActQ,KAAKH,MAAMyQ,YAAc,GACpEC,EAAYvQ,KAAKwP,eAAexP,KAAKH,MAAMiQ,cAAgBO,GACjE,OACA,yBAAKnP,GAAG,MAAMjB,UAAWD,KAAKF,MAAMiP,SAAW,WAAY,GAAIJ,YAAa3O,KAAK2O,YAAaK,WAAYhP,KAAKgP,YAC7G,yBAAKwB,QAAQ,YAAYvQ,UAAU,kBACnC,0BACIA,UAAU,YACVM,QAASP,KAAKO,QACdwP,EAAC,WAAMK,EAAOnN,EAAb,YAAkBmN,EAAOlN,EAAzB,cAAgCkN,EAAOX,OAAvC,YAAiDW,EAAOX,OAAxD,oBAA0EW,EAAOV,SAAjF,0BACGU,EAAOX,OADV,YACoBW,EAAOX,OAD3B,qBAC8CW,EAAOV,YAE1D,0BACEzP,UAAS,4BAAuBD,KAAKF,MAAM0O,WAAa,SAAU,IAClEjO,QAASP,KAAKO,QACdwP,EAAC,WAAMQ,EAAUtN,EAAhB,YAAqBsN,EAAUrN,EAA/B,cAAsCqN,EAAUd,OAAhD,YAA0Dc,EAAUd,OAApE,oBAAsFc,EAAUb,SAAhG,cAA8Ga,EAAUd,OAAxH,YAAkIc,EAAUd,OAA5I,qBAA+Jc,EAAUb,YAE3K1P,KAAKyQ,uBACN,0BAAMxN,EAAE,KAAKC,EAAE,KAAKjD,UAAU,aAAaM,QAASP,KAAKO,SAAzD,UAAsEP,KAAKF,MAAMsO,WAAjF,Y,GAvJYjO,IAAMC,Y,SbJZT,O,eAAAA,I,oBAAAA,M,SAqFG+Q,E,kDA1Db,WAAY7Q,GAAY,IAAD,8BACrB,cAAMA,IAvBA8Q,SAAW,CAAC,CAClB9P,KAAM,QACN+P,KAAMjR,EAAakR,QACnB,CACAhQ,KAAM,kBACN+P,KAAMjR,EAAakR,QAClB,CACDhQ,KAAM,kBACN+P,KAAMjR,EAAakR,QAClB,CACDhQ,KAAM,MACN+P,KAAMjR,EAAamR,KACnB7G,QAAS,kBAAC,EAAD,CAAK6F,cAAe,IAAKF,MAAO,GAAIO,SAAU,OAUlC,EAPfY,YAAyC,CAC/CC,EAAG,QACHC,EAAG,kBACHC,EAAG,2BACHC,EAAG,OAGkB,EAOfC,OAAS,WACf,EAAK/C,UAAS,SAACE,GAAD,MAA+B,CAAE8C,oBAAqB9C,EAAU8C,oBAAsB,OAR/E,EAWfC,OAAS,WACf,EAAKjD,UAAS,SAACE,GAAD,MAA+B,CAAE8C,oBAAqB9C,EAAU8C,oBAAsB,OAZ/E,EAefE,aAAe,WACrB,IAAMC,EAAY,EAAKb,SAAS,EAAK7Q,MAAMuR,qBAAqBpH,QAChE,OAAOuH,GAAwB,MAf/B,EAAK1R,MAAQ,CACXuR,oBAAqB,GAHF,E,qDAqBrB,IAAM/D,EAAiBtN,KAAK2Q,SAAS3Q,KAAKF,MAAMuR,qBAEhD,OACE,yBAAKnQ,GAAG,YACN,yBAAKjB,UAAU,sBAEXqN,EAAesD,OAASjR,EAAakR,QACrC,kBAAC,EAAD,CAAgBvD,eAAgBA,EAAezM,OAG/CyM,EAAesD,OAASjR,EAAamR,MACrC9Q,KAAKuR,eAEP,yBAAKtR,UAAU,mBAEwB,IAAnCD,KAAKF,MAAMuR,qBACX,yBAAKpR,UAAU,aAAaM,QAASP,KAAKsR,QACxC,0BAAMrR,UAAU,qBAGpB,0BAAMA,UAAU,gBAAgBD,KAAK+Q,YAAY/Q,KAAKF,MAAMuR,sBAE1DrR,KAAKF,MAAMuR,sBAAwBrR,KAAK2Q,SAAS7M,OAAS,GAC1D,yBAAK7D,UAAU,aAAaM,QAASP,KAAKoR,QACxC,0BAAMnR,UAAU,4B,GApETE,IAAMC,WeuBdqR,G,8DA3Bb,WAAY5R,GAAqB,IAAD,8BAC9B,cAAMA,IACDC,MAAQ,GAFiB,E,qDAKtB,IAAD,EAC6BE,KAAKH,MAAjC0C,EADD,EACCA,MAAO6L,EADR,EACQA,WAAY5N,EADpB,EACoBA,KAErBkR,EAAQ,CACZC,MAAoB,GAAbvD,EACPwD,gBAAiBrP,GAGnB,OACA,yBAAKtC,UAAU,WACb,yBAAKA,UAAU,MAAMyR,MAAOA,IAC5B,0BAAMzR,UAAU,QAAQO,Q,GAjBTL,IAAMC,YC2BZyR,G,wDA1Bb,WAAYhS,GAAqB,IAAD,8BAC9B,cAAMA,IACDC,MAAQ,GAFiB,E,2DAM9B,OAAOE,KAAKH,MAAMiS,OAAOvL,KAAI,SAACwL,EAAOC,GACnC,OACA,0BAAM3G,IAAG,gBAAW2G,GAAO/R,UAAU,SAClC8R,Q,+BAML,OACA,yBAAK9R,UAAU,UACXD,KAAKiS,oB,GAlBQ9R,IAAMC,YCgLZ8R,E,kDA7Kb,WAAYrS,GAAY,IAAD,8BACrB,cAAMA,IAMAsS,YAAc,WACpB,EAAK9D,SAAS,CAAE+D,WAAW,KARN,EAWfC,aAAe,WACrB,EAAKhE,SAAS,CAAE+D,WAAW,KAV3B,EAAKtS,MAAQ,CACXsS,WAAW,GAHQ,E,gEAeKE,GAG1B,OADyBA,EADL,GAC6B,M,+BAKjD,IAAMC,EAAgBvS,KAAKwS,oBAAoB,IAUzCC,EAAiBzS,KAAKwS,oBAAoB,IAS1CE,EAAuB1S,KAAKwS,oBAAoB,IAQhDG,EAAgB3S,KAAKwS,oBAAoB,IAU/C,OACE,yBAAKtR,GAAG,YACN,kBAAC,EAAD,KACE,yBAAKjB,UAAU,UAAf,cACA,yBAAKA,UAAU,cAAf,qBACA,kBAAC,EAAD,CACEO,KAAM,mBACN+B,MAAO,UACP6L,WAAYmE,IAEd,mHAIA,0IAIA,oIAIA,4BACExS,MAAM,aACN6S,MAAM,KACNC,OAAO,MACPlB,MAAM,MACNvQ,IAAI,gDACJF,GAAG,iBACH4R,UAAU,OAEZ,kBAAC,EAAD,CAAQhB,OAnEW,CACvB,aACA,UACA,SACA,UACA,SACA,UA8DI,yBAAK7R,UAAU,UAAf,aACA,yBAAKA,UAAU,cAAf,4BACA,kBAAC,EAAD,CACEO,KAAM,kBACN+B,MAAO,UACP6L,WAAYqE,IAEd,kKAKA,yJAKA,gKAIA,yBACExS,UAAU,YACVkB,IAAI,cACJC,IAAKC,4BAEP,kBAAC,EAAD,CAAQyQ,OApFU,CACtB,YACA,SACA,QACA,UACA,WAgFI,yBAAK7R,UAAU,UAAf,aACA,yBAAKA,UAAU,cAAf,gCACA,kBAAC,EAAD,CACEO,KAAM,kBACN+B,MAAO,UACP6L,WAAYsE,IAEd,6GAIA,2HAIA,sKAKA,kBAAC,EAAD,CAAQZ,OAhGkB,CAC9B,YACA,YACA,MACA,+BA6FI,yBAAK7R,UAAU,UAAf,aACA,yBAAKA,UAAU,cAAf,sBACA,kBAAC,EAAD,CACEO,KAAM,kBACN+B,MAAO,UACP6L,WAAYuE,IAEd,2HAIA,oGAIA,sHAIA,4GAIA,kBAAC,EAAD,CAAQb,OAhHW,CACvB,OACA,WACA,SACA,cACA,SACA,oB,GAzDgB3R,IAAMC,WCkBb2S,MAhBf,WACE,OACE,yBAAK9S,UAAU,OACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,OACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,OACb,kBAAC,EAAD,SCLY+S,QACW,cAA7BvR,OAAOV,SAASkS,UAEe,UAA7BxR,OAAOV,SAASkS,UAEhBxR,OAAOV,SAASkS,SAASC,MACvB,2DCZNC,IAASlG,OACP,kBAAC,IAAMmG,WAAP,KACE,kBAAC,EAAD,OAEFhG,SAASC,eAAe,SDiIpB,kBAAmBgG,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9R,GACLD,QAAQC,MAAMA,EAAM+R,c","file":"static/js/main.8a148352.chunk.js","sourcesContent":["import React from 'react';\nimport './projects.scss';\nimport SceneComponent from './components/scene/SceneComponent';\nimport Pie from './pie/Pie';\nexport enum ProjectTypes {\n  TwoD,\n  ThreeD\n}\nclass Projects extends React.Component<{}, ProjectsState> {\n  private projects = [{\n    name: 'moist',\n    type: ProjectTypes.ThreeD,\n  },{\n    name: 'matterport-logo',\n    type: ProjectTypes.ThreeD,\n  }, {\n    name: 'animal-crossing',\n    type: ProjectTypes.ThreeD,\n  }, {\n    name: 'pie',\n    type: ProjectTypes.TwoD,\n    project: <Pie circumference={100} total={81} viewSize={40}/>\n  }\n  ];\n  private projectsMap: { [key: number]: string } = {\n    0: 'Moist',\n    1: 'Matterport Logo',\n    2: 'Animal Crossing in Three',\n    3: 'Pie'\n  }\n\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      currentProjectCount: 0,\n    };\n  }\n\n  private onNext = () => {\n    this.setState((prevState: ProjectsState) => ({ currentProjectCount: prevState.currentProjectCount + 1 }));\n  }\n\n  private onPrev = () => {\n    this.setState((prevState: ProjectsState) => ({ currentProjectCount: prevState.currentProjectCount - 1 }));\n  }\n\n  private getUIProject = () => {\n    const uiProject = this.projects[this.state.currentProjectCount].project;\n    return uiProject ? uiProject : null;\n  }\n\n  render() {\n    const currentProject = this.projects[this.state.currentProjectCount];\n\n    return (\n      <div id='projects'>\n        <div className='projects-container'>\n          {\n            currentProject.type === ProjectTypes.ThreeD &&\n            <SceneComponent currentProject={currentProject.name}/>\n          }\n          {\n            currentProject.type === ProjectTypes.TwoD &&\n            this.getUIProject()\n          }\n          <div className='current-project'>\n            {\n              this.state.currentProjectCount !== 0 &&\n              <div className='click-prev' onClick={this.onPrev}>\n                <span className='bryan icon-prev' />\n              </div>\n            }\n            <span className='project-name'>{this.projectsMap[this.state.currentProjectCount]}</span>\n            {\n              this.state.currentProjectCount !== this.projects.length - 1 &&\n              <div className='click-next' onClick={this.onNext}>\n                <span className='bryan icon-next' />\n              </div>\n            }\n          </div>\n        </div>\n      </div>);\n  }\n}\n\ninterface ProjectsState {\n  currentProjectCount: number;\n}\n\nexport default Projects;\n","import React from 'react';\nimport './panel.scss';\n\nclass Panel extends React.Component<PanelProps, {}> {\n  constructor(props: PanelProps) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { title } = this.props;\n    return (\n    <div className='panel'>\n      { this.props.title && <h2>{title}</h2> }\n      {this.props.children}\n    </div>);\n  }\n}\n\ninterface PanelProps {\n  title?: string;\n}\n\nexport default Panel;\n","import React from 'react';\nimport './button.scss';\n\nclass Button extends React.Component<ButtonProps, {}>{\n  constructor(props: ButtonProps) {\n    super(props);\n    this.state = {};\n  }\n\n  private onBtnClick = () => {\n    this.props.onClick();\n  }\n\n  render() {\n    return (\n    <div className='bry-button'>\n      <button className='bry-button-elem' onClick={this.onBtnClick}>{this.props.text}</button>\n    </div>);\n  }\n}\n\ninterface ButtonProps {\n  text: string;\n  onClick: () => void;\n}\n\nexport default Button;\n","import React, { useState } from 'react';\nimport './profile.scss';\nimport Panel from '../panel/Panel';\nimport Button from '../button/Button';\n\nexport const Profile = () => {\n  const [profile] = useState(() => ({\n    profileAlt: 'bryan\"/s profile pic',\n    profileSrc: 'profile_pic.jpg',\n    name: 'Bryan Nguyen',\n    description: 'Software Engineer',\n    location: 'San Jose, CA',\n    contactInfo: 'bryan.canh@gmail.com'\n  }));\n\n  function onResumeBtnClick() {\n    try {\n      window.open('https://drive.google.com/file/d/1ZMauJyforXSWWJSHiUvXAQjt7THIvq8R/view?usp=sharing', '_blank');\n    } catch (err) {\n      console.error('Could not open resume link');\n    }\n  }\n\n  return (\n    <div id='profile'>\n      <Panel>\n        <div className='profile-container'>\n          <div id='profile-pic'>\n            <img alt={profile.profileAlt} src={`${process.env.PUBLIC_URL}/images/${profile.profileSrc}`} />\n          </div>\n          <div id='name'>\n            <span>{profile.name}</span>\n          </div>\n          <div id='description'>\n            <p>{profile.description}</p>\n          </div>\n          <div id='location'>\n            <span className='bryan icon-location' />\n            <span className='location'>{profile.location}</span>\n          </div>\n          <div id='contact-info'>\n            <div>\n              <a className='linkedin' href='https://www.linkedin.com/in/bryancnguyen/' target='_blank' rel='noopener noreferrer'>LinkedIn</a>\n            </div>\n            <div>\n              <a className='github' href='https://github.com/Bryancnguyen' target='_blank' rel='noopener noreferrer'>Github</a>\n            </div>\n            <div>\n              <a className='email' href='mailto:bryan.canh@gmail.com'>{profile.contactInfo}</a>\n            </div>\n          </div>\n          <div id='resume'>\n            <Button text={'Resume'} onClick={onResumeBtnClick} />\n          </div>\n        </div>\n        <div className='aboutme-container'>\n          <div id='about'>\n            <h1>Hello World</h1>\n            <p>I am currently a Software Engineer specializing in Front End Web Development.\n            I've been building visuals for the web my whole career and have worked with small and large scale projects\n            both in a start up and mid-sized company.\n      </p>\n            <p>\n              I enjoy consuming the vast number of libraries that encompass the world of Javascript\n              and making small prototypes from each of them. I am currently building applications in ReactJS and applying ThreeJS to some of my\n              personal projects.\n      </p>\n            <p>\n              I am an aspiring engineer that continues to enjoy writing concise code and will not hesitate if a complex problem appears.\n              Just feed me coffee and I'll code anything for you.\n      </p>\n          </div>\n        </div>\n      </Panel>\n    </div>\n  );\n};\n","export const degreesToRadians = (degree: number) => {\n  return degree * (Math.PI / 180);\n}","import { Object3D, MeshPhongMaterial, DoubleSide, BoxGeometry, Mesh, Geometry, Vector3, Material } from 'three';\nimport { degreesToRadians } from '../utils/degreesToRadians';\nimport ComponentType from '../ComponentType';\n\nexport class MatterportLogo implements ComponentType {\n  public readonly name = 'matterport-logo';\n  private logo: Object3D;\n  private tempGeometry: Mesh | null;\n  private material = new MeshPhongMaterial({\n    color: 0xFF3158,\n    transparent: true,\n    side: DoubleSide,\n    reflectivity: 1,\n    opacity: 0.8,\n    specular: 0xFC7A8C,\n  });\n  \n  private geometries: Geometry[] = [];\n  private materials: Material[] = [];\n\n  private rotations = [\n    { x: 25, y: -43.05, z: 0 },\n  ];\n  private positions = [\n    { x: 0, y: 0, z: 0 },\n  ];\n  private LShapeGeometry = [\n    { x: 1, y: 0, z: 0 },\n    { x: 1, y: 1, z: 0 },\n    { x: 1, y: 2, z: 0 },\n    { x: -1, y: 0, z: 0 },\n    { x: 1, y: 3, z: 0 },\n    { x: 1, y: 4, z: -0 },\n    { x: 1, y: 4, z: -1 },\n    { x: 1, y: 4, z: -2 },\n    { x: 1, y: 4, z: -3 },\n    // OPPOSITE SIDE\n    { x: 0, y: 4, z: -3 },\n    { x: -1, y: 4, z: -3 },\n    { x: -2, y: 4, z: -3 },\n    { x: -2, y: 3, z: -3 },\n    { x: -2, y: 2, z: -3 },\n    { x: -2, y: 1, z: -3 },\n    { x: -2, y: 0, z: -3 },\n    { x: -2, y: 0, z: -2 },\n    { x: -2, y: 0, z: -1 },\n    { x: -2, y: 0, z: 0 },\n  ];\n\n  constructor() {\n    this.materials.push(this.material);\n    this.logo = this.createMeshLogo();\n    this.tempGeometry = null;\n    this.logo.scale.copy(new Vector3(50, 50, 50));\n  }\n\n  public get container() {\n    return this.logo;\n  }\n\n  /**\n   * Construct Matterport Logo\n   */\n  private createMeshLogo = () => {\n    const root = new Object3D();\n    for (let i = 0; i < 1; i++) {\n      const geometry = new BoxGeometry(5, 5, 5);\n      this.geometries.push(geometry);\n      for (let j = 0; j < this.LShapeGeometry.length; j++) {\n        const geometry2 = new BoxGeometry(5, 5, 5);\n        this.tempGeometry = new Mesh(geometry2);\n\n        this.geometries.push(geometry2);\n\n        this.tempGeometry.position.x = 5 * this.LShapeGeometry[j].x;\n        this.tempGeometry.position.y = 5 * this.LShapeGeometry[j].y;\n        this.tempGeometry.position.z = i === 1 ? 5 * this.LShapeGeometry[j].z : -1 * (5 * this.LShapeGeometry[j].z);\n        this.tempGeometry.updateMatrix();\n        geometry.merge(this.tempGeometry.geometry as Geometry, this.tempGeometry.matrix);\n      }\n\n  \n      const mesh = new Mesh(geometry, this.material);\n  \n      mesh.rotateX(degreesToRadians(this.rotations[i].x)); /// 180\n      mesh.rotateY(degreesToRadians(this.rotations[i].y));\n      mesh.rotateZ(degreesToRadians(this.rotations[i].z));\n      mesh.position.x += this.positions[i].x;\n      mesh.position.y += this.positions[i].y;\n      mesh.position.z += this.positions[i].z;\n  \n  \n      root.add(mesh);\n    }\n    return root;\n  }\n\n  public update() {\n    this.logo.rotation.y -= 0.01;\n  }\n\n  public dispose() {\n    this.geometries.forEach((geometry) => {\n      geometry.dispose();\n    })\n    this.materials.forEach((material) => {\n      material.dispose();\n    })\n  }\n}\n\nexport default MatterportLogo;\n","import { Object3D, Mesh, Vector3, MeshLambertMaterial, TextureLoader, sRGBEncoding, RepeatWrapping,\n  PlaneBufferGeometry, DoubleSide, MeshBasicMaterial, BoxBufferGeometry, Material, BufferGeometry } from 'three';\nimport ComponentType from '../ComponentType';\n\nexport class Boundaries implements ComponentType {\n  public readonly name = 'animal-crossing';\n  private boundaries: Object3D;\n  private wallMaterial: MeshLambertMaterial;\n  private materialTransparent: MeshBasicMaterial;\n  private floorMaterial: MeshBasicMaterial;\n  private floor: Object3D | null = null;\n  private geometries: BufferGeometry[] = [];\n  private materials: Material[] = [];\n\n  constructor() {\n    const loader = new TextureLoader();\n    const floorTexture = loader.load(`${process.env.PUBLIC_URL}/assets/textures/a_flooring2.png`);\n    floorTexture.wrapS = floorTexture.wrapT = RepeatWrapping;\n    floorTexture.repeat.set( 6, 6 );\n    floorTexture.anisotropy = 16;\n    floorTexture.encoding = sRGBEncoding;\n    this.floorMaterial = new MeshLambertMaterial({\n      map: floorTexture,\n    });\n    const wallTexture = loader.load(`${process.env.PUBLIC_URL}/assets/textures/wall5.jpg`);\n    wallTexture.wrapS = wallTexture.wrapT = RepeatWrapping;\n    wallTexture.repeat.set( 2, 2 );\n    wallTexture.anisotropy = 16;\n    wallTexture.encoding = sRGBEncoding;\n    this.wallMaterial = new MeshLambertMaterial({\n      side: DoubleSide,\n      map: wallTexture,\n    });\n    this.materialTransparent =  new MeshBasicMaterial( { transparent: true, opacity: 0, side: DoubleSide} );\n\n    this.materials.push(this.floorMaterial, this.wallMaterial, this.materialTransparent);\n\n    this.boundaries = this.createWalls();\n  }\n\n  private createWalls() {\n    const root = new Object3D();\n    const walls = this.createWallMeshes();\n    this.positionWalls(walls);\n    this.floor = this.createFloor();\n    this.positionFloor(this.floor);\n    walls.add(this.floor);\n    root.add(walls);\n    root.scale.copy(new Vector3(1, 1, 1));\n    return root;\n  }\n\n  private createFloor() {\n    const geometry = new PlaneBufferGeometry(3500, 2000);\n    this.geometries.push(geometry);\n    const mesh = new Mesh(geometry, this.floorMaterial);\n    mesh.receiveShadow = true;\n    return mesh;\n  }\n\n  private createWallMeshes() {\n    const geometry = new BoxBufferGeometry(3500, 2000, 1500);\n    this.geometries.push(geometry);\n    const mesh = new Mesh(geometry, [this.wallMaterial, this.wallMaterial,\n      this.wallMaterial, this.materialTransparent, this.materialTransparent, this.materialTransparent]);\n    mesh.receiveShadow = true;\n    return mesh;\n  }\n\n  public addToFloor = (obj: Object3D | Object3D[]) => {\n    if (this.floor) {\n      if (Array.isArray(obj)) {\n        this.floor.add(...obj);\n      } else {\n        this.floor.add(obj);\n      }\n    }\n  }\n\n  private positionWalls(mesh: Object3D) {\n    mesh.position.y = - 350;\n    mesh.rotation.x = - Math.PI / 4;\n  }\n\n  private positionFloor(mesh: Object3D) {\n    mesh.position.z = - 750;\n  }\n\n  public get container() {\n    return this.boundaries;\n  }\n\n  public update() {}\n\n  public dispose() {\n    this.geometries.forEach((geometry) => {\n      geometry.dispose();\n    })\n    this.materials.forEach((material) => {\n      material.dispose();\n    })\n  }\n}\n\nexport default Boundaries;","import { Object3D } from 'three';\nimport { GLTFLoader, GLTF } from 'three/examples/jsm/loaders/GLTFLoader';\n\nexport class Desk {\n  constructor(private addSceneNode: (obj: Object3D) => void) {}\n\n  public createDesk() {\n    const loader = new GLTFLoader();\n    loader.load(`${process.env.PUBLIC_URL}/assets/desk/scene.gltf`, (obj: GLTF) => this.onLoad(obj));\n  }\n\n  private onLoad(obj: GLTF) {\n    obj.scene.position.x = 1000;\n    obj.scene.position.y = 650;\n    obj.scene.rotation.x = - Math.PI / 2;\n    obj.scene.rotation.z = - Math.PI;\n    obj.scene.rotation.y = - Math.PI / 2;\n    obj.scene.scale.set(2.2, 2.2, 2.2);\n    this.addSceneNode(obj.scene);\n  }\n}\n\nexport default Desk;","import { Object3D } from 'three';\nimport { GLTFLoader, GLTF } from 'three/examples/jsm/loaders/GLTFLoader';\n\nexport class Bedroom {\n  constructor(private addSceneNode: (obj: Object3D) => void) {}\n\n  public createBedroom() {\n    const loader = new GLTFLoader();\n    loader.load(`${process.env.PUBLIC_URL}/assets/bedroom/scene.gltf`, (obj: GLTF) => this.onLoad(obj));\n  }\n\n  private onLoad(obj: GLTF) {\n    obj.scene.position.x = -800;\n    obj.scene.position.z = 100;\n    obj.scene.position.y = 800;\n    obj.scene.rotation.x = - Math.PI / 2;\n    obj.scene.rotation.z = - Math.PI;\n    obj.scene.scale.set(13, 13, 13);\n    this.addSceneNode(obj.scene);\n  }\n}\n\nexport default Bedroom;","import { SphereGeometry, MeshPhongMaterial, Mesh, Vector3, Object3D, PointLight, AmbientLight, Geometry, Material } from 'three';\nimport ComponentType from '../ComponentType';\n\nexport default class Moist implements ComponentType {\n  public readonly name = 'moist';\n  private moist: Object3D = new Object3D();\n  private geometry: SphereGeometry;\n  private waterGeometry: SphereGeometry;\n  private material: MeshPhongMaterial;\n  private material2: MeshPhongMaterial;\n  private geometries: Geometry[] = [];\n  private materials: Material[] = [];\n  private tempVect = new Vector3();\n\n  constructor() {\n    this.geometry = new SphereGeometry(64, 32, 32);\n    this.waterGeometry = new SphereGeometry(40, 20, 20);\n\n    this.material = new MeshPhongMaterial({\n      color: '#F00000',\n    });\n    this.material2 = new MeshPhongMaterial({\n      color: '#FFFFFF',\n    });\n\n    this.geometries.push(this.geometry);\n    this.materials.push(this.material, this.material2);\n\n    this.moist.add(...this.createMoistComponent());\n    this.addLight();\n  }\n\n  public get container() {\n    return this.moist;\n  }\n\n  private createMoistComponent() {\n    const spheres: Object3D[] = [];\n\n    for (let i = 0; i < 2000; i++) {\n      const root = new Object3D();\n      root.position.copy(this.calcPosition());\n\n      const hydro = new Mesh(this.geometry, this.material);\n      const agua1 = new Mesh(this.waterGeometry, this.material2);\n      const agua2 = new Mesh(this.waterGeometry, this.material2);\n\n      agua1.position.set(40, -40, 5);\n      agua2.position.set(-40, -40, 5);\n\n\n      root.rotation.x = (Math.random() * 360) * Math.PI / 180;\n      root.rotation.y = (Math.random() * 360) * Math.PI / 180;\n      root.rotation.z = (Math.random() * 360) * Math.PI / 180;\n      root.add(hydro, agua1, agua2);\n\n      spheres.push(root);\n    }\n    return spheres;\n  }\n\n  private addLight() {\n    const light = new PointLight(0xffffff, 1, 10000);\n    light.position.set(5000, 5000, 5000);\n    const light_two = new PointLight(0xffffff, 1, 4000);\n    light_two.position.set(-1000, 8000, 8000);\n    const lightAmbient = new AmbientLight(0x404040);\n\n    this.moist.add(light, light_two, lightAmbient);\n  }\n\n  private calcPosition() {\n    this.tempVect.set(\n      (Math.random() - 0.5) * 5000,\n      (Math.random() - 0.5) * 5000,\n      (Math.random() - 0.5) * 5000,\n    )\n    return this.tempVect;\n  }\n\n  public dispose() {\n    this.geometries.forEach((geometry) => {\n      geometry.dispose();\n    })\n    this.materials.forEach((material) => {\n      material.dispose();\n    })\n  }\n\n  public update() {\n    const timer = 0.0002 * Date.now();\n    for ( let i = 0, il = this.moist.children.length; i < il; i ++ ) {\n\n    const sphere = this.moist.children[ i ];\n    sphere.updateMatrixWorld();\n\n    sphere.position.x = 1000 * Math.cos( timer + i );\n    sphere.position.y = 1000 * Math.sin( timer + i * 1.1 );\n    sphere.rotation.x += Math.random() * 0.05;\n    sphere.rotation.y += Math.random() * 0.05;\n    }\n  }\n}","\nimport { Scene, PerspectiveCamera, Color, WebGLRenderer, Object3D, Camera, SpotLight, DirectionalLight } from 'three';\nimport MatterportLogo from '../matterport-logo/MatterportLogo';\nimport Boundaries from '../boundaries/Boundaries';\nimport ComponentType from '../ComponentType';\nimport Desk from '../desk/Desk';\nimport Bedroom from '../bedroom/Bedroom';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport Moist from '../moist/Moist';\n\nclass SceneCore {\n  private camera: PerspectiveCamera;\n  private scene: Scene;\n  private renderer: WebGLRenderer;\n  private components: ComponentType[] = [];\n  private controls: OrbitControls | null = null;\n  private canvasWidth: number = window.innerWidth;\n  private canvasHeight: number = 500;\n  private currentScene: string = '';\n  private sceneProjects: string[] = [];\n  private sceneObjMap: {[nodeName: string]: Object3D} = {};\n\n  constructor(private canvas: HTMLElement) {\n    // set up the scene\n    this.scene = new Scene();\n    this.camera = new PerspectiveCamera( 90, this.canvasWidth / this.canvasHeight, 1, 10000 );\n    this.renderer = new WebGLRenderer({ antialias: true, alpha: true });\n  }\n\n  public init = (project: string) => {\n    this.camera.position.set( 0, 0, 2500 );\n    this.scene.add(this.camera);\n    // set scene color\n    this.scene.background = new Color(0x121212);\n    this.renderer.setSize(this.canvasWidth, this.canvasHeight);\n\n    if (this.canvas) {\n      this.canvas.appendChild(this.renderer.domElement);\n    }\n    this.activate(project);\n  }\n\n  /**\n   * Resize function for when window size changes\n   */\n  public handleResize = () => {\n    this.camera.aspect = window.innerWidth / this.canvasHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(window.innerWidth, this.canvasHeight)\n  }\n\n  public updateProject(projectName: string) {\n    if (!this.sceneProjects.includes(projectName)) {\n      // if the project doesn't exist, it's probably because its not a threejs Project, so go ahead hide\n      this.scene.visible = false;\n    } else {\n      this.scene.visible = true;\n      // if the project does exist, find the object and update its visibility in our scene\n      this.currentScene = projectName;\n    }\n  }\n\n  private activate(project: string) {\n    this.addSceneObjects(project);\n \n    // create controls\n    this.createControls(this.camera, this.renderer);\n  }\n\n  private addSceneObjects(project: string) {\n    // Boundaries will contain the entire group of objects inside it! Hierarchy!\n    const boundaries = new Boundaries();\n    const matterportLogo = new MatterportLogo();\n    const moist = new Moist();\n\n    const matterportLogoLight = new DirectionalLight(0xFFFFFF, 2.5);\n    matterportLogoLight.position.copy(this.camera.position);\n    matterportLogoLight.castShadow = true;\n    matterportLogo.container.add(matterportLogoLight)\n\n    const animalCrossLight = new SpotLight(0xFBEEE4, 1.5);\n    animalCrossLight.position.copy(this.camera.position);\n    animalCrossLight.castShadow = true;\n    boundaries.container.add(animalCrossLight);\n    \n    // the names of the projects should match with the component name\n    this.sceneProjects.push(moist.name, matterportLogo.name, boundaries.name);\n \n    this.addSceneNode(moist.container, moist.name);\n    this.addSceneNode(matterportLogo.container, matterportLogo.name);\n    this.addSceneNode(boundaries.container, boundaries.name);\n\n    // show the matterport logo as its the first project\n    this.currentScene = !project ? moist.name : project;\n    // lazy load third party content\n    this.loadThirdPartyObjects(boundaries);\n\n    // must add components to get it into the update loop\n    this.components = [moist, matterportLogo, boundaries];\n  }\n\n  /**\n   * Controls for moving the scene around\n   * @param camera \n   * @param renderer \n   */\n  private createControls(camera: Camera, renderer: WebGLRenderer) {\n    this.controls = new OrbitControls( camera, renderer.domElement );\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.05;\n    this.controls.screenSpacePanning = false;\n    this.controls.minDistance = 1000;\n    this.controls.maxDistance = 5000;\n    this.controls.maxPolarAngle = Math.PI / 2;\n  }\n\n  /**\n   * These are objects that come from SketchFab that we have in our public dir\n   * @param boundaries \n   */\n  private loadThirdPartyObjects(boundaries: Boundaries) {\n    const desk = new Desk(boundaries.addToFloor);\n    desk.createDesk();\n\n    const bedroom = new Bedroom(boundaries.addToFloor);\n    bedroom.createBedroom();\n  }\n\n  /**\n   * Function to allow adding to scene\n   * @param node \n   */\n  public addSceneNode = (node: Object3D, componentName: string) => {\n    // start out not visible\n    node.visible = false;\n    this.scene.add(node);\n    this.sceneObjMap[componentName] = node;\n  }\n\n  /**\n   * Function allow retrieval of camera\n   */\n  public getCamera() {\n    return this.camera;\n  }\n\n  /**\n   * Function to render the current scene with camera\n   */\n  private renderScene() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Update loop for components and the scene\n   */\n  public animate = () => {\n    requestAnimationFrame(this.animate);\n    // render scene\n    this.renderScene();\n    // update controls!\n    if (this.controls) {\n      this.controls.update();\n    }\n\n    // call each components individual update loop\n    this.components.forEach((c: ComponentType) => {\n      c.update();\n    });\n\n    // show and hide the current and not current projects\n    for (let [key, value] of Object.entries(this.sceneObjMap)) {\n      if (key === this.currentScene) {\n        value.visible = true;\n      } else {\n        value.visible = false;\n      }\n    }\n  }\n\n  // free up memory\n  public dispose = () => {\n    this.components.forEach((c) => {\n      c.dispose()\n    });\n  }\n}\n\nexport default SceneCore;\n","import React from 'react';\nimport SceneCore from './SceneCore';\nimport './scene.scss';\nclass SceneComponent extends React.Component<SceneComponentProps, {}> {\n  private sceneCore: SceneCore | null = null;\n\n  constructor(props: SceneComponentProps) {\n    super(props);\n    this.state = {};\n  }\n\n  public componentDidMount() {\n    const canvas = document.getElementById('canvas')!;\n    this.sceneCore = new SceneCore(canvas);\n    this.sceneCore.init(this.props.currentProject);\n    this.sceneCore.animate();\n    if (this.sceneCore) {\n      // resize the canvas when the window size has changed\n      window.addEventListener('resize', this.sceneCore.handleResize, false);\n    }\n  }\n\n  public componentWillUnmount() {\n    if (this.sceneCore) {\n      window.removeEventListener('resize', this.sceneCore.handleResize, false);\n      this.sceneCore.dispose();\n    }\n  }\n\n  render() {\n    return (<div id='canvas' />)\n  }\n\n  public componentDidUpdate(nextProps: SceneComponentProps) {\n    if (nextProps.currentProject !== this.props.currentProject) {\n      this.updateProject(this.props.currentProject);\n    }\n  }\n\n  private updateProject(project: string) {\n    if (!this.sceneCore) return;\n    this.sceneCore.updateProject(project);\n  }\n}\n\ninterface SceneComponentProps {\n  currentProject: string;\n}\n\nexport default SceneComponent;\n","export const pieData: PieData = [{\n  className: 'circle',\n  completion: 31,\n  color: '#ffdb8d',\n}, {\n  className: 'circle',\n  completion: 13,\n  color: '#0AE6E5',\n}, {\n  className: 'circle',\n  completion: 15,\n  color: '#ffa28d',\n},\n{\n  className: 'circle',\n  completion: 22,\n  color: '#ff8db1',\n}];\n\n\ntype PieData = Array<Circle>;\n\ntype Circle = {\n  className: string,\n  completion: number,\n  color: string,\n}","import React from 'react';\nimport './pie.scss';\nimport { pieData } from './pieData';\nimport { calculatePercentage } from './calculatePercentage';\n\n/**\n * To use Pie, pass in a js object in the structure of PieData\n */\nclass Pie extends React.Component<PieProps, PieState> {\n  private totalCircumference = 0;\n  private clickTimeout: number = 0;\n  private timer: number = 0;\n\n  constructor(props: PieProps) {\n    super(props);\n    this.state = {\n      circleElements: [],\n      pieHover: false,\n      pieClicked: false,\n      completed: false,\n      percentage: 0,\n    };\n  }\n\n  public componentDidMount() {\n    // call to update the percentage and start strokes\n    this.updatePercentage();\n  }\n\n  public componentWillUnmount() {\n    // mem leaks are bad\n    window.clearInterval(this.timer);\n    window.clearTimeout(this.clickTimeout);\n  }\n\n  /**\n   * Function that updates the percentage inside the circle\n   */\n  private updatePercentage = () =>{\n    const { completed } = this.state;\n    if (!completed) {\n      this.timer = window.setInterval(this.updatePercentageNumber, 15);\n    }\n  }\n\n  /**\n   * Doing this so I don't have to do .bind on it or else it could just go in setInterval\n   */\n  private updatePercentageNumber = () => {\n    if (this.state.percentage !== 100 && !this.state.completed) {\n      this.setState((prevState) => ({percentage: prevState.percentage + 1}));\n    } else {\n      this.setState({completed: true});\n      window.clearInterval(this.timer);\n    }\n  }\n\n  /**\n   * Shadow around the pie when you click on the pie\n   */\n  private onClick = () => {\n    this.setState({pieClicked: true});\n    window.clearTimeout(this.clickTimeout);\n    this.clickTimeout = window.setTimeout(() => {\n      this.setState({pieClicked: false});\n    }, 500);\n    if (this.props.onClick) this.props.onClick();\n  }\n\n  /**\n   * Renders each circle element from the js data\n   */\n  private renderCircleElements() {\n    this.totalCircumference = 0;\n    const circles = pieData;\n    \n    return circles.map((c, index) => {\n      return this.createProgressCircle(index, c.completion, c.color);\n    });\n  }\n\n  /**\n   * Calculates the individual strokes that show up around the pie chart\n   * @param index \n   * @param completion \n   * @param strokeColor \n   */\n  private createProgressCircle(index: number, completion: number, strokeColor: string) {\n    const { x, y, radius, diameter } = this.calculateDPath();\n    const completedAmount = calculatePercentage(completion, this.props.total);\n    const offsetCompletion = this.totalCircumference > 0 ? -this.totalCircumference : this.totalCircumference;\n    this.totalCircumference += this.props.circumference && completedAmount ? completedAmount : 0;\n    return (\n      <path\n        key={`circle-${index}`}\n        className={'circle'}\n        d={`M${x} ${y} a ${radius} ${radius} 0 0 1 0 ${diameter} a ${radius} ${radius} 0 0 1 0 -${diameter}`}\n        stroke={strokeColor}\n        strokeDasharray={`${completedAmount}, 100`}\n        strokeDashoffset={offsetCompletion}\n      />\n    );\n  }\n\n  /**\n   * function to get x and y position + the size of the circle for the svg path\n   * @param c if a circumference is passed, calculate with it\n   */\n  private calculateDPath(c?: number) {\n    const { circumference, viewSize } = this.props;\n    const radius = (c ? c : circumference) / (2 * Math.PI);\n    const diameter = radius * 2;\n    const x = viewSize / 2;\n    const y = ((viewSize - diameter) / 2);\n    return {\n      radius,\n      diameter,\n      x,\n      y\n    }\n  }\n\n  /**\n   * Show a hover text if user has entered this element\n   */\n  private onMouseOver = (e: React.MouseEvent) => {\n    const target = e.target as HTMLElement;\n    if (!target) return;\n    if (target.classList.contains('circle-bg') || target.classList.contains('percentage') || target.classList.contains('circle-bg-clicked')) {\n      this.setState({pieHover: true});\n    }\n  }\n\n  /**\n   * Remove hover css class on hover out\n   */\n  private onMouseOut = (_: never) => {\n    this.setState({pieHover: false});\n  }\n\n  render() {\n    const bgSize = this.calculateDPath();\n    const clickShadowSize = this.props.clickedSize ? this.props.clickedSize : 10;\n    const bgClicked = this.calculateDPath(this.props.circumference + clickShadowSize);\n    return (\n    <div id='pie' className={this.state.pieHover ? 'pieHover': ''} onMouseOver={this.onMouseOver} onMouseOut={this.onMouseOut}>\n      <svg viewBox=\"0 0 40 40\" className=\"circular-chart\">\n      <path\n          className='circle-bg'\n          onClick={this.onClick}\n          d={`M${bgSize.x} ${bgSize.y} a ${bgSize.radius} ${bgSize.radius} 0 0 1 0 ${bgSize.diameter} \n          a ${bgSize.radius} ${bgSize.radius} 0 0 1 0 -${bgSize.diameter}`}\n      />\n      <path\n        className={`circle-bg-clicked ${this.state.pieClicked ? 'active': ''}`}\n        onClick={this.onClick}\n        d={`M${bgClicked.x} ${bgClicked.y} a ${bgClicked.radius} ${bgClicked.radius} 0 0 1 0 ${bgClicked.diameter} a ${bgClicked.radius} ${bgClicked.radius} 0 0 1 0 -${bgClicked.diameter}`}\n      />\n      {this.renderCircleElements()}\n      <text x=\"20\" y=\"22\" className=\"percentage\" onClick={this.onClick}>{`${this.state.percentage}%`}</text>\n    </svg>\n    </div>);\n  }\n}\n\ninterface PieState {\n  circleElements: JSX.Element[];\n  pieHover: boolean;\n  pieClicked: boolean;\n  completed: boolean;\n  percentage: number;\n}\n\ninterface PieProps {\n  onClick?: () => void;\n  viewSize: number;\n  circumference: number;\n  clickedSize?: number // the size of the shadow that shows up click clicking the pie\n  total: number; // the total of each stroke's completion percentage added together\n}\n\nexport default Pie;\n","export const calculatePercentage = (amt: number, totalAmt: number) => {\n  const percentage = (amt / totalAmt) * 100;\n  return percentage;\n}","import React from 'react';\nimport './expBar.scss';\n\nclass ExpBar extends React.Component<ExpBarProps, {}> {\n  constructor(props: ExpBarProps) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { color, percentage, text } = this.props;\n\n    const style = {\n      width: percentage * 12,\n      backgroundColor: color,\n    }\n\n    return (\n    <div className='exp-bar'>\n      <div className='bar' style={style}/>\n      <span className='text'>{text}</span>\n    </div>);\n  }\n}\n\ninterface ExpBarProps {\n  percentage: number;\n  text: string;\n  color: string;\n}\n\nexport default ExpBar;\n","import React from 'react';\nimport './badges.scss';\n\nclass Badges extends React.Component<BadgesProps, {}> {\n  constructor(props: BadgesProps) {\n    super(props);\n    this.state = {};\n  }\n\n  private renderBadges() {\n    return this.props.badges.map((badge, idx) => {\n      return (\n      <span key={`badge-${idx}`} className='badge'>\n        {badge}\n      </span>)\n    });\n  }\n\n  render() {\n    return (\n    <div className='badges'>\n      { this.renderBadges() }\n    </div>);\n  }\n}\n\ninterface BadgesProps {\n  badges: string[];\n}\n\nexport default Badges;\n","import React from \"react\";\nimport \"./workExp.scss\";\nimport Panel from \"../panel/Panel\";\nimport ExpBar from \"./exp-bar/ExpBar\";\nimport Badges from \"./badges/Badges\";\nclass WorkExp extends React.Component<{}, WorkExpState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      openModal: false,\n    };\n  }\n\n  private onOpenModal = () => {\n    this.setState({ openModal: true });\n  };\n\n  private onCloseModal = () => {\n    this.setState({ openModal: false });\n  };\n\n  private calculatePercentage(months: number) {\n    const totalMonths = 81;\n    const monthPercentage = (months / totalMonths) * 100;\n    return monthPercentage;\n  }\n\n  render() {\n    const matterportExp = this.calculatePercentage(22);\n    const matterportBadges = [\n      \"Typescript\",\n      \"ReactJS\",\n      \"Preact\",\n      \"ThreeJS\",\n      \"NodeJS\",\n      \"Jest\",\n    ];\n\n    const ellieMaeDevExp = this.calculatePercentage(15);\n    const ellieMae1Badges = [\n      \"AngularJS\",\n      \"NodeJS\",\n      \"Mocha\",\n      \"Jasmine\",\n      \"Karma\",\n    ];\n\n    const ellieMaeDevInternExp = this.calculatePercentage(13);\n    const ellieMaeDevInternBadges = [\n      \"AngularJS\",\n      \"Wordpress\",\n      \"PHP\",\n      \"Content Management System\",\n    ];\n\n    const ellieMaeQAExp = this.calculatePercentage(31);\n    const ellieMaeQABadges = [\n      \"Java\",\n      \"Selenium\",\n      \"Appium\",\n      \"WebDriverIO\",\n      \"SoapUI\",\n      \"Post Man\",\n    ];\n\n    return (\n      <div id=\"work-exp\">\n        <Panel>\n          <div className=\"header\">Matterport</div>\n          <div className=\"sub-header\">Software Engineer</div>\n          <ExpBar\n            text={\"1 Year 10 Months\"}\n            color={\"#ff8db1\"}\n            percentage={matterportExp}\n          />\n          <p>\n            Worked on researching and creating new user experiences within\n            Showcase and Workshop\n              </p>\n          <p>\n            Showcase was a viewer for the a 3D model that a user could\n            interact with and could be embed within webpages\n              </p>\n          <p>\n            Workshop was an editor that allowed model owners to edit how a\n            model would be presented to the viewer\n              </p>\n          <iframe\n            title=\"matterport\"\n            allow=\"vr\"\n            height=\"480\"\n            width=\"700\"\n            src=\"https://my.matterport.com/show/?m=f6dv1vRds4q\"\n            id=\"iFrameResizer0\"\n            scrolling=\"no\"\n          ></iframe>\n          <Badges badges={matterportBadges} />\n          <div className=\"header\">Ellie Mae</div>\n          <div className=\"sub-header\">Software Engineer I / II</div>\n          <ExpBar\n            text={\"1 Year 5 Months\"}\n            color={\"#8dffa2\"}\n            percentage={ellieMaeDevExp}\n          />\n          <p>\n            Worked on developing TPO Connect and TPO Admin, a web portal\n            that allowed investors and lenders to collaborate with their\n            customers\n              </p>\n          <p>\n            TPO Connect had a rich set of features such as uploading\n            documents, ordering credit, and processing a loan from end to\n            end\n              </p>\n          <p>\n            TPO Connnect Admin was another web portal that allowed investors\n            and lenders to personalize their TPO Connect portal and workflow\n              </p>\n          <img\n            className=\"tpo-photo\"\n            alt=\"TPO Connect\"\n            src={process.env.PUBLIC_URL + \"/images/tpo.png\"}\n          />\n          <Badges badges={ellieMae1Badges} />\n          <div className=\"header\">Ellie Mae</div>\n          <div className=\"sub-header\">Software Engineer Dev Intern</div>\n          <ExpBar\n            text={\"1 Year 1 Months\"}\n            color={\"#ffa28d\"}\n            percentage={ellieMaeDevInternExp}\n          />\n          <p>\n            Worked on developing a content management system using Wordpress\n            and AngularJS\n              </p>\n          <p>\n            Content management system was intended to be the source of truth\n            for re-usable UI components\n              </p>\n          <p>\n            Content management system would allow UX designers and engineers\n            to collaborate when creating components that all teams could\n            bootstrap\n              </p>\n          <Badges badges={ellieMaeDevInternBadges} />\n          <div className=\"header\">Ellie Mae</div>\n          <div className=\"sub-header\">QA Engineer Intern</div>\n          <ExpBar\n            text={\"2 Year 7 Months\"}\n            color={\"#ffdb8d\"}\n            percentage={ellieMaeQAExp}\n          />\n          <p>\n            Worked as an automation QA Engineer creating scripts that tested\n            Ellie Mae's web application\n              </p>\n          <p>\n            Responsible for writing test cases and designing automation\n            framework\n              </p>\n          <p>\n            Worked as a manual tester for Encompass, a desktop application\n            that ran only on Windows\n              </p>\n          <p>\n            Worked as a manual tester for TPO, a web based application\n            developed with PHP\n              </p>\n          <Badges badges={ellieMaeQABadges} />\n        </Panel>\n      </div>\n    );\n  }\n}\n\ninterface WorkExpState {\n  openModal: boolean;\n}\n\nexport default WorkExp;\n","import React from 'react';\nimport './index.scss';\nimport './App.scss';\nimport { Profile } from './profile/Profile';\nimport Projects from './projects/Projects';\nimport WorkExp from './work-exp/WorkExp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className='row'>\n        <Projects />\n      </div>\n      <div className='row'>\n        <Profile />\n      </div>\n      <div className='row'>\n        <WorkExp />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}